using System;
using System.Collections.Generic;

namespace ProgressTrackingSystem
{
    // Represents an Instructor in the system
    public class Instructor
    {
        public int InstructorID { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }

        // Constructor
        public Instructor(int instructorID, string name, string email)
        {
            InstructorID = instructorID;
            Name = name;
            Email = email;
        }

        // Method to log in and navigate to the dashboard
        public Dashboard AccessDashboard()
        {
            return new Dashboard(this);
        }
    }

    // Represents the Progress Tracking Dashboard
    public class Dashboard
    {
        public Instructor Instructor { get; set; }
        public List<ActivityLog> ActivityLogs { get; set; }
        public List<PerformanceReport> PerformanceReports { get; set; }

        // Constructor
        public Dashboard(Instructor instructor)
        {
            Instructor = instructor;
            ActivityLogs = new List<ActivityLog>();
            PerformanceReports = new List<PerformanceReport>();
        }

        // Method to view activity logs for a group or student
        public List<ActivityLog> ViewActivityLogs(int groupID = 0, int studentID = 0)
        {
            // Filtering logs by group or student
            return ActivityLogs.FindAll(log => (groupID == 0 || log.GroupID == groupID) &&
                                               (studentID == 0 || log.StudentID == studentID));
        }

        // Method to generate a performance report
        public PerformanceReport GeneratePerformanceReport(List<Metric> metrics)
        {
            var report = new PerformanceReport(metrics);
            PerformanceReports.Add(report);
            return report;
        }

        // Method to identify areas for improvement
        public List<string> IdentifyImprovementAreas(PerformanceReport report)
        {
            return report.GetImprovementAreas();
        }
    }

    // Represents an Activity Log
    public class ActivityLog
    {
        public int LogID { get; set; }
        public int GroupID { get; set; }
        public int StudentID { get; set; }
        public string ActivityDescription { get; set; }
        public DateTime ActivityDate { get; set; }

        // Constructor
        public ActivityLog(int logID, int groupID, int studentID, string activityDescription, DateTime activityDate)
        {
            LogID = logID;
            GroupID = groupID;
            StudentID = studentID;
            ActivityDescription = activityDescription;
            ActivityDate = activityDate;
        }
    }

    // Represents a Performance Report
    public class PerformanceReport
    {
        public int ReportID { get; set; }
        public DateTime GeneratedOn { get; set; }
        public List<Metric> Metrics { get; set; }

        // Constructor
        public PerformanceReport(List<Metric> metrics)
        {
            GeneratedOn = DateTime.Now;
            Metrics = metrics;
        }

        // Method to get identified areas for improvement based on metrics
        public List<string> GetImprovementAreas()
        {
            List<string> improvementAreas = new List<string>();
            foreach (var metric in Metrics)
            {
                if (metric.Value < metric.MinimumThreshold)
                {
                    improvementAreas.Add($"{metric.Name} needs improvement.");
                }
            }
            return improvementAreas;
        }
    }

    // Represents a metric for performance evaluation
    public class Metric
    {
        public string Name { get; set; }
        public double Value { get; set; }
        public double MinimumThreshold { get; set; }

        // Constructor
        public Metric(string name, double value, double minimumThreshold)
        {
            Name = name;
            Value = value;
            MinimumThreshold = minimumThreshold;
        }
    }

    // Demonstration class for running the use case
    public static class Program
    {
        public static void Main()
        {
            // Create an instructor and access the dashboard
            Instructor instructor = new Instructor(1, "Dr. Smith", "drsmith@university.edu");
            Dashboard dashboard = instructor.AccessDashboard();

            // View activity logs
            List<ActivityLog> logs = dashboard.ViewActivityLogs(groupID: 101);

            // Generate a performance report with sample metrics
            List<Metric> metrics = new List<Metric>
            {
                new Metric("Participation", 75, 80),
                new Metric("Assignment Completion", 95, 90)
            };

            PerformanceReport report = dashboard.GeneratePerformanceReport(metrics);

            // Identify areas for improvement
            List<string> improvements = dashboard.IdentifyImprovementAreas(report);

            // Display identified improvement areas
            Console.WriteLine("Areas for Improvement:");
            foreach (var improvement in improvements)
            {
                Console.WriteLine(improvement);
            }
        }
    }
}
